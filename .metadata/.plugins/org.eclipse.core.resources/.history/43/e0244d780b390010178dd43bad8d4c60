package br.com.saodimas.view.components.panel.apolice;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextField;

import br.com.saodimas.controller.Controller;
import br.com.saodimas.model.beans.ApoliceVO;
import br.com.saodimas.model.beans.CidadeVO;
import br.com.saodimas.model.exception.MensagemSaoDimasException;
import br.com.saodimas.view.components.document.CustomDocument;
import br.com.saodimas.view.components.panel.BarraNotificacao;
import br.com.saodimas.view.components.spinner.DataSpinner;
import br.com.saodimas.view.util.ExpReg;
import br.com.saodimas.view.util.ListasComuns;

@SuppressWarnings("serial")
public class ConsultaApolicePanel extends JPanel {
	private static final String MENSAGEM_PADRAO = " ";
	private static final int QUALQUER = 0;
	private static final int CONTRATO = 1;
	private static final int NOME = 2;
	private static final int DOCUMENTO = 3;
	private static final int DATA = 4;
	private static final int DEPENDENTE = 5;
	private static final int CIDADE = 6;
	private static final String[] OPCOES_CONSULTA = {"Qualquer","N. Apólice","Nome do Titular","Documento","Data de Adesão", "Dependente", "Cidade"}; 

	private BarraNotificacao barNotificacao;
	private JComboBox cbOpcoes;
	private JComboBox cbCidades;
	private JTextField txtContrato;
	private JTextField txtNome;
	private JTextField txtNomeDependente;
	private JTextField txtDocumento;
	private DataSpinner spnDataIni;
	private DataSpinner spnDataFin;
	private JPanel panelPeriodo;
	private ButtonGroup bgrStatus;
	private JRadioButton rdQualquer;
	private JRadioButton rdAtivo;
	private JRadioButton rdSuspenso;
	private JRadioButton rdCancelado;
	private JButton btCancelar;
	private JButton btEnviar;

	private JLabel lbOpcoes;
	private JLabel lbContrato;
	private JLabel lbNome;
	private JLabel lbDocumento;
	private JLabel lbData;
	private JLabel lbStatus;
	private JLabel lbNomeDependente;
	private JLabel lbCidades;

	private static final Dimension DLABEL = new Dimension(120,22);
	private static final Dimension DFIELDM = new Dimension(115,22);

	public ConsultaApolicePanel() {
		initialize();
		configure();
	}

	public void limparCampos() {
		txtNome.setText("");
		txtNomeDependente.setText("");
		txtDocumento.setText("");
		txtContrato.setText("");
		spnDataIni.setValue(new Date(Calendar.getInstance().getTimeInMillis()));
		spnDataFin.setValue(new Date(Calendar.getInstance().getTimeInMillis()));
		rdQualquer.setSelected(true);
		cbOpcoes.setSelectedIndex(1);
		barNotificacao.escondeMensagem();
		txtContrato.requestFocus();
	}

	public void focoPadrao(){
		txtContrato.requestFocus();
	}
	
	private void initialize() {
		barNotificacao = new BarraNotificacao(MENSAGEM_PADRAO);

		lbOpcoes = new JLabel("Consultar por... ", JLabel.RIGHT);
		lbOpcoes.setPreferredSize(DLABEL);
		lbOpcoes.setMinimumSize(DLABEL);

		cbOpcoes = new JComboBox(OPCOES_CONSULTA);
		cbOpcoes.setSelectedIndex(1);
		cbOpcoes.setPreferredSize(DFIELDM);
		cbOpcoes.setMinimumSize(DFIELDM);
		cbOpcoes.addItemListener(new EventoComboOpcoes());

		
		lbCidades = new JLabel("Cidade.: ", JLabel.RIGHT);
		lbCidades.setPreferredSize(DLABEL);
		lbCidades.setMinimumSize(DLABEL);
		
		List<CidadeVO> list = Controller.getInstance().getCidadeAll();
		CidadeVO[] array = new CidadeVO[list.size()];
		
		cbCidades = new JComboBox(list.toArray(array));
		cbCidades.setSelectedIndex(1);
		cbCidades.setPreferredSize(DFIELDM);
		cbCidades.setMinimumSize(DFIELDM);
				
		lbContrato = new JLabel("N. Apólice.:", JLabel.RIGHT);
		lbContrato.setPreferredSize(DLABEL);
		lbContrato.setMinimumSize(DLABEL);
		lbContrato.setVisible(true);

		CustomDocument contrDoc = new CustomDocument(ExpReg.NUMERIC, 20);
		txtContrato = new JTextField();
		txtContrato.setDocument(contrDoc);
		txtContrato.setPreferredSize(DFIELDM);
		txtContrato.setVisible(true);
		txtContrato.requestFocus();

		lbNome = new JLabel("Que contenha... ", JLabel.RIGHT);
		lbNome.setPreferredSize(DLABEL);
		lbNome.setMinimumSize(DLABEL);
		lbNome.setVisible(false);
		
		CustomDocument nomeDoc = new CustomDocument(50);
		txtNome = new JTextField();
		txtNome.setDocument(nomeDoc);
		txtNome.setPreferredSize(DFIELDM);
		txtNome.setVisible(false);
		
		lbNomeDependente = new JLabel("Que contenha... ", JLabel.RIGHT);
		lbNomeDependente.setPreferredSize(DLABEL);
		lbNomeDependente.setMinimumSize(DLABEL);
		lbNomeDependente.setVisible(false);

		CustomDocument nomeDocdep = new CustomDocument(50);
		txtNomeDependente = new JTextField();
		txtNomeDependente.setDocument(nomeDocdep);
		txtNomeDependente.setPreferredSize(DFIELDM);
		txtNomeDependente.setVisible(false);
		
		lbDocumento = new JLabel("Igual a... ", JLabel.RIGHT);
		lbDocumento.setPreferredSize(DLABEL);
		lbDocumento.setMinimumSize(DLABEL);
		lbDocumento.setVisible(false);

		CustomDocument doc = new CustomDocument(ExpReg.NUMERIC, 14);
		txtDocumento = new JTextField();
		txtDocumento.setDocument(doc);
		txtDocumento.setPreferredSize(DFIELDM);
		txtDocumento.setVisible(false);

		lbData = new JLabel("No período de...", JLabel.RIGHT);
		lbData.setPreferredSize(DLABEL);
		lbData.setMinimumSize(DLABEL);
		lbData.setVisible(false);

		SimpleDateFormat f = new SimpleDateFormat("dd/MM/yyyy");
		Calendar c = Calendar.getInstance();
		c.add(Calendar.YEAR, -500);
		String dataIni = f.format(new Date(c.getTimeInMillis()));

		c = Calendar.getInstance();
		c.add(Calendar.MONTH, -1);
		String dataSel = f.format(new Date(c.getTimeInMillis()));

		String dataFin = f.format(new Date(Calendar.getInstance().getTimeInMillis()));

		spnDataIni = new DataSpinner(dataSel, dataIni, dataFin);
		spnDataIni.setPreferredSize(DFIELDM);
		spnDataIni.setMinimumSize(DFIELDM);

		spnDataFin = new DataSpinner(dataFin, dataIni, dataFin);
		spnDataFin.setPreferredSize(DFIELDM);
		spnDataFin.setMinimumSize(DFIELDM);

		panelPeriodo = new JPanel(new FlowLayout(FlowLayout.LEADING));
		panelPeriodo.add(spnDataIni);
		panelPeriodo.add(new JLabel(" a "));
		panelPeriodo.add(spnDataFin);
		panelPeriodo.setMinimumSize(new Dimension(200, 22));
		panelPeriodo.setBorder(BorderFactory.createEmptyBorder());
		panelPeriodo.setVisible(false);

		lbStatus = new JLabel("Com o Status... ", JLabel.RIGHT);
		lbStatus.setPreferredSize(DLABEL);
		lbStatus.setMinimumSize(DLABEL);

		bgrStatus = new ButtonGroup();
		rdQualquer = new JRadioButton("Qualquer");
		rdAtivo = new JRadioButton(ListasComuns.STATUS_ITENS[0]);
		rdSuspenso = new JRadioButton(ListasComuns.STATUS_ITENS[2]);
		rdCancelado = new JRadioButton(ListasComuns.STATUS_ITENS[1]);

		bgrStatus.add(rdQualquer);
		bgrStatus.add(rdAtivo);
		bgrStatus.add(rdSuspenso);
		bgrStatus.add(rdCancelado);

		bgrStatus.setSelected(rdQualquer.getModel(), true);

		btCancelar = new JButton("Cancelar", new ImageIcon("imagens/cancel.gif"));
		btCancelar.addActionListener(new EventoBotaoControle());
		btCancelar.setHorizontalAlignment(JButton.LEFT);

		btEnviar = new JButton("Enviar", new ImageIcon("imagens/submit.gif"));
		btEnviar.addActionListener(new EventoBotaoControle());
		btEnviar.setHorizontalAlignment(JButton.LEFT);
	}

	private void configure() {
		GridBagConstraints c = new GridBagConstraints();
		JPanel infApolice = new JPanel(new GridBagLayout());

		c.anchor = GridBagConstraints.FIRST_LINE_END;
		c.fill = GridBagConstraints.HORIZONTAL;
		c.insets = new Insets(1, 1, 2, 1);
		c.weightx = 0;

		c.gridy = 0; infApolice.add(lbOpcoes, c);
		c.gridy = 1; infApolice.add(lbContrato, c);
		c.gridy = 2; infApolice.add(lbNome, c);
		c.gridy = 3; infApolice.add(lbDocumento, c);
		c.gridy = 4; infApolice.add(lbData, c);
		c.gridy = 5; infApolice.add(lbNomeDependente, c);
		c.gridy = 6; infApolice.add(lbStatus, c);
		

		JPanel panelStatus = new JPanel(new FlowLayout(FlowLayout.LEADING));
		panelStatus.add(rdQualquer);
		panelStatus.add(rdAtivo);
		panelStatus.add(rdSuspenso);
		panelStatus.add(rdCancelado);
		panelStatus.setMinimumSize(new Dimension(200, 22));
		panelStatus.setBorder(BorderFactory.createEmptyBorder());

		c.anchor = GridBagConstraints.FIRST_LINE_START;
		c.fill = GridBagConstraints.HORIZONTAL;
		c.weightx = 1;
		c.weighty = 0;
		c.gridx = 1;
		c.gridy = 0; infApolice.add(cbOpcoes, c);
		c.gridy = 1; infApolice.add(txtContrato, c);
		c.gridy = 2; infApolice.add(txtNome, c);
		c.gridy = 3; infApolice.add(txtDocumento, c);
		c.gridy = 4; infApolice.add(panelPeriodo, c);
		c.gridy = 5; infApolice.add(txtNomeDependente, c);
		c.weighty = 1;
		c.gridy = 6; infApolice.add(panelStatus, c);
		

		infApolice.setBorder(BorderFactory.createTitledBorder("Parâmetros da consulta"));
		adicionarAtalhosComandos(infApolice);

		JPanel controle = new JPanel(new FlowLayout(FlowLayout.RIGHT));
		controle.add(btEnviar);
		controle.add(btCancelar);
		controle.setMinimumSize(new Dimension(200, 22));
		adicionarAtalhosComandos(controle);

		JPanel panelApolice = new JPanel(new BorderLayout());
		panelApolice.add(barNotificacao, BorderLayout.NORTH);
		panelApolice.add(infApolice, BorderLayout.CENTER);
		panelApolice.add(controle, BorderLayout.SOUTH);
		adicionarAtalhosComandos(panelApolice);

		JPanel formPrincipal = new JPanel(new FlowLayout(FlowLayout.LEADING));
		formPrincipal.add(panelApolice);
		adicionarAtalhosComandos(formPrincipal);

		setLayout(new BorderLayout());
		add(formPrincipal, BorderLayout.CENTER);
		adicionarAtalhosComandos(this);
	}

	private void adicionarAtalhosComandos(JPanel panel){
		for (Component c : panel.getComponents()) {
			c.addKeyListener(new KeyAdapter(){
				@Override
				public void keyPressed(KeyEvent e) {
					if (e.getKeyCode() == KeyEvent.VK_ESCAPE) btCancelar.doClick();
					else if (e.getKeyCode() == KeyEvent.VK_ENTER) btEnviar.doClick();
					else super.keyPressed(e);
				}
			});
		}
	}

	private Component getPainelPrincipal(){
		Component c = getParent();
		while (c != null){
			if (c.getClass() == ApoliceMainPanel.class) return c;
			c = c.getParent();
		}

		return c;
	}		

	private String getSelectedStatus(){
		if(rdAtivo.isSelected())return ListasComuns.STATUS_ITENS[0];
		else if(rdCancelado.isSelected())return ListasComuns.STATUS_ITENS[1];
		else if(rdSuspenso.isSelected())return ListasComuns.STATUS_ITENS[2];
		else return "Qualquer";

	}

	private String[] getParamentros()
	{
		List<String> p = new ArrayList<String>();
		String[] parametros = null;

		if(cbOpcoes.getSelectedItem().toString().equals(OPCOES_CONSULTA[NOME]))
			p.add(txtNome.getText());
		else if(cbOpcoes.getSelectedItem().toString().equals(OPCOES_CONSULTA[DEPENDENTE]))
			p.add(txtNomeDependente.getText());
		else if(cbOpcoes.getSelectedItem().toString().equals(OPCOES_CONSULTA[DOCUMENTO]))
			p.add(txtDocumento.getText());
		else if(cbOpcoes.getSelectedItem().toString().equals(OPCOES_CONSULTA[CONTRATO]))	
			p.add(txtContrato.getText());
		else if(cbOpcoes.getSelectedItem().toString().equals(OPCOES_CONSULTA[DATA])){
			p.add(new SimpleDateFormat("dd/MM/yyyy").format((Date)spnDataIni.getValue()));
			p.add(new SimpleDateFormat("dd/MM/yyyy").format((Date)spnDataFin.getValue()));
		}
		else
			p = null;

		if(p != null){
			parametros = new String[p.size()];
			p.toArray(parametros);
		}
		return parametros;
	}

	private void consultaApolicesAtivas(){
		ApoliceMainPanel c = (ApoliceMainPanel)getPainelPrincipal();
		String tipo = cbOpcoes.getSelectedItem().toString();
		List <ApoliceVO> apolicesEncontradas = Controller.getInstance().consultaApolices(tipo, getParamentros(), getSelectedStatus());
		if (apolicesEncontradas != null && apolicesEncontradas.size() > 0){
			c.carregarApoliceTable(apolicesEncontradas);
			c.mostrarMensagem("Consulta efetuada com sucesso! " + (apolicesEncontradas.size() == 1 ? " Apenas 1 apólice encontrada ..." : apolicesEncontradas.size() + " apólices encontradas ..."), BarraNotificacao.SUCESSO);
			c.getIframeConsultaApolice().setVisible(false);
		}
		else{
			c.carregarApoliceTable(null);
			c.mostrarMensagem("", BarraNotificacao.DEFAULT);
			barNotificacao.mostrarMensagem("Nenhuma apólice encontrada com esses critérios...", BarraNotificacao.ERRO);
		}
	}


	private class EventoComboOpcoes implements ItemListener{
		public void itemStateChanged(ItemEvent e) {
			
			boolean showContrato	= e.getItem() != OPCOES_CONSULTA[QUALQUER] && e.getItem() == OPCOES_CONSULTA[CONTRATO];
			boolean showNome		= e.getItem() != OPCOES_CONSULTA[QUALQUER] && e.getItem() == OPCOES_CONSULTA[NOME];
			boolean showDependente	= e.getItem() != OPCOES_CONSULTA[QUALQUER] && e.getItem() == OPCOES_CONSULTA[DEPENDENTE];
			boolean showDocumento	= e.getItem() != OPCOES_CONSULTA[QUALQUER] && e.getItem() == OPCOES_CONSULTA[DOCUMENTO];
			boolean showData		= e.getItem() != OPCOES_CONSULTA[QUALQUER] && e.getItem() == OPCOES_CONSULTA[DATA];

			lbContrato.setVisible(showContrato);
			lbNome.setVisible(showNome);
			lbDocumento.setVisible(showDocumento);
			lbData.setVisible(showData);
			lbNomeDependente.setVisible(showDependente);

			txtContrato.setVisible(showContrato);
			txtNome.setVisible(showNome);
			txtDocumento.setVisible(showDocumento);
			panelPeriodo.setVisible(showData);
			txtNomeDependente.setVisible(showDependente);

			Component c = getPainelPrincipal();
			try{
				((ApoliceMainPanel)c).getIframeConsultaApolice().pack();
			}
			catch(ClassCastException cex){}
		}
	}
	
	private void validarCamposPesquisa()throws MensagemSaoDimasException
	{
		if(cbOpcoes.getSelectedItem().toString().equals(OPCOES_CONSULTA[NOME]) && (txtNome.getText() == null || txtNome.getText().trim().equals("")))
				throw new MensagemSaoDimasException("Você deve informar um nome para busca."); 
		
		if(cbOpcoes.getSelectedItem().toString().equals(OPCOES_CONSULTA[DEPENDENTE]) && (txtNomeDependente.getText() == null || txtNomeDependente.getText().trim().equals("")))
			throw new MensagemSaoDimasException("Você deve informar um nome para busca.");
				
		else if(cbOpcoes.getSelectedItem().toString().equals(OPCOES_CONSULTA[DOCUMENTO]) && (txtDocumento.getText() == null || txtDocumento.getText().trim().equals("")))
			throw new MensagemSaoDimasException("Você deve informar num. do documneto.");
		
		else if(cbOpcoes.getSelectedItem().toString().equals(OPCOES_CONSULTA[CONTRATO]) && (txtContrato.getText() == null || txtContrato.getText().trim().equals("")))
			throw new MensagemSaoDimasException("Você deve informar numero apolice.");
	
		else if(cbOpcoes.getSelectedItem().toString().equals(OPCOES_CONSULTA[DATA]) && (spnDataFin.getValue() == null || spnDataIni.getValue()==null)){
			throw new MensagemSaoDimasException("Você deve informar as data inicio e/ou fim");
		}
	}

	private class EventoBotaoControle implements ActionListener{
		public void actionPerformed(ActionEvent e) {
			ApoliceMainPanel c = (ApoliceMainPanel)getPainelPrincipal();
			
			if (e.getSource() == btCancelar)
				c.getIframeConsultaApolice().setVisible(false);
			
			else if (e.getSource() == btEnviar)
			{
				try{
					validarCamposPesquisa();
					consultaApolicesAtivas();
				}catch (MensagemSaoDimasException ex) {
					barNotificacao.mostrarMensagem(ex.getMessage(), BarraNotificacao.ERRO);
				}
			}

		}
	}
}
