package br.com.saodimas.view.components.panel.financeiro.venda;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.text.DecimalFormat;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;

import br.com.saodimas.controller.Controller;

import br.com.saodimas.model.beans.ProdutoVO;
import br.com.saodimas.model.beans.ProdutoVendaVO;
import br.com.saodimas.view.components.panel.BarraNotificacao;
import br.com.saodimas.view.components.table.renderer.SpinnerRenderer;
import br.com.saodimas.view.components.text.MoedaTextField;

@SuppressWarnings("serial")
public class SelecaoProdutoVendaPanel extends JPanel {
	
	private static final String MENSAGEM_PADRAO = "   (*) Preenchimento obrigatório";
	
	private ProdutoVendaVO produtoVenda;
	private BarraNotificacao barNotificacao;
	
	private JComboBox cbProdutos;
	private MoedaTextField txtValorProdutoUnitario;
	private MoedaTextField txtValorProdutoTotal;
	private SpinnerRenderer spinnerQuantidade;
	
	
	private JButton btCancelar;
	private JButton bAdicionar;

	private JLabel lbQuantidade;
	private JLabel lbProduto;
	private JLabel lbValorUnitario;
	private JLabel lbValorTotal;
	
	
	private static final Dimension DLABEL = new Dimension(120,22);
	private static final Dimension DFIELDM = new Dimension(115,22);

	
	private DecimalFormat formatter = new DecimalFormat("#0.00");
	
	
	public SelecaoProdutoVendaPanel() {
		initialize();
		configure();
	}

	public ProdutoVendaVO getProduto() {
		return produtoVenda;
	}

	public void setProduto(ProdutoVendaVO pVenda) {
	
		this.produtoVenda = pVenda;
		if(pVenda != null){
			ProdutoVO prod = pVenda.getProduto();
			cbProdutos.setSelectedItem(prod);
			txtValorProdutoUnitario.setText(formatter.format(pVenda.getValor()));
			txtValorProdutoTotal.setText(formatter.format(pVenda.getTotal()));
			spinnerQuantidade.setValue(pVenda.getQuantidade());			
		}else
		{
			this.carregarCompoProdutos();
			txtValorProdutoUnitario.setText("");
			txtValorProdutoTotal.setText("");
			spinnerQuantidade.setValue(1);
			if(cbProdutos.getModel().getSize() > 0)
				cbProdutos.setSelectedIndex(0);
		}
	}
	
	
	public void recarregarTabela() {
		carregarCompoProdutos();
	}
	
	private void carregarCompoProdutos() {
		List<ProdutoVO> list = Controller.getInstance().getProdutoVendasAtivos();
		cbProdutos.removeAllItems();
		for(ProdutoVO produto : list)
			cbProdutos.addItem(produto);
	}

	public void focoPadrao(){
		cbProdutos.requestFocus();
	}

	private void initialize() {
		barNotificacao = new BarraNotificacao(MENSAGEM_PADRAO);
		

		lbProduto = new JLabel("Produto: ", JLabel.RIGHT);
		lbProduto.setPreferredSize(DLABEL);
		lbProduto.setMinimumSize(DLABEL);
		
		cbProdutos = new JComboBox();
		cbProdutos.addItemListener(new AlteracaoProdutoListner());
						
		lbValorUnitario = new JLabel("Valor:", JLabel.RIGHT);
		lbValorUnitario.setPreferredSize(DLABEL);
		lbValorUnitario.setMinimumSize(DLABEL);
		
		txtValorProdutoUnitario = new MoedaTextField();
		txtValorProdutoUnitario.setPreferredSize(DFIELDM);
		txtValorProdutoUnitario.setMinimumSize(DFIELDM);
		
		lbValorTotal = new JLabel("Valor Total: *", JLabel.RIGHT);
		lbValorTotal.setPreferredSize(DLABEL);
		lbValorTotal.setMinimumSize(DLABEL);
		
		txtValorProdutoTotal = new MoedaTextField();
		txtValorProdutoTotal.setPreferredSize(DFIELDM);
		txtValorProdutoTotal.setMinimumSize(DFIELDM);
		txtValorProdutoTotal.setEditable(false);
		
		lbQuantidade = new JLabel("Quantidade: *", JLabel.RIGHT);
		lbQuantidade.setPreferredSize(DLABEL);
		lbQuantidade.setMinimumSize(DLABEL);
		
		spinnerQuantidade = new SpinnerRenderer();
		spinnerQuantidade.setValue(1);
		spinnerQuantidade.addAncestorListener(new EventoBotaoControle());
		
		btCancelar = new JButton("Cancelar", new ImageIcon("imagens/cancel.gif"));
		btCancelar.addActionListener(new EventoBotaoControle());
		btCancelar.setHorizontalAlignment(JButton.LEFT);

		bAdicionar = new JButton("Adicionar", new ImageIcon("imagens/save.gif"));
		bAdicionar.addActionListener(new EventoBotaoControle());
		bAdicionar.setHorizontalAlignment(JButton.LEFT);
	}

	private void configure() {
		GridBagConstraints c = new GridBagConstraints();
		JPanel infProduto = new JPanel(new GridBagLayout());

		c.anchor = GridBagConstraints.FIRST_LINE_END;
		c.fill = GridBagConstraints.HORIZONTAL;
		c.insets = new Insets(1, 1, 2, 1);
		c.weightx = 0;
		c.gridy = 0; infProduto.add(lbProduto, c);
		c.gridy = 1; infProduto.add(lbQuantidade, c);
		c.gridy = 2; infProduto.add(lbValorUnitario, c);
		c.gridy = 3; infProduto.add(lbValorTotal, c);
	

		c.anchor = GridBagConstraints.FIRST_LINE_START;
		c.fill = GridBagConstraints.NONE;
		c.weightx = 1;
		c.weighty = 0;
		c.gridx = 1;
		//c.fill = GridBagConstraints.HORIZONTAL;
		c.gridy = 0; infProduto.add(cbProdutos, c);
		c.fill = GridBagConstraints.NONE;
		c.gridy = 1; infProduto.add(spinnerQuantidade, c);
		c.gridy = 2; infProduto.add(txtValorProdutoUnitario, c);
		c.weighty = 1;
		c.gridy = 3; infProduto.add(txtValorProdutoTotal, c);
	

		infProduto.setBorder(BorderFactory.createTitledBorder("Produto"));
		adicionarAtalhosComandos(infProduto);

		JPanel controle = new JPanel(new FlowLayout(FlowLayout.RIGHT));
		controle.add(bAdicionar);
		controle.add(btCancelar);
		controle.setMinimumSize(new Dimension(200, 22));
		adicionarAtalhosComandos(controle);
		

		JPanel panelColaborador = new JPanel(new BorderLayout());
		panelColaborador.add(barNotificacao, BorderLayout.NORTH);
		panelColaborador.add(infProduto, BorderLayout.CENTER);
		panelColaborador.add(controle, BorderLayout.SOUTH);
		adicionarAtalhosComandos(panelColaborador);

		JPanel formPrincipal = new JPanel(new FlowLayout(FlowLayout.LEADING));
		formPrincipal.add(panelColaborador);
		adicionarAtalhosComandos(formPrincipal);

		setLayout(new BorderLayout());
		add(formPrincipal, BorderLayout.CENTER);
		adicionarAtalhosComandos(this);
	}

	private void adicionarAtalhosComandos(JPanel panel){
		for (Component c : panel.getComponents()) {
			c.addKeyListener(new KeyAdapter(){
				@Override
				public void keyPressed(KeyEvent e) {
					if (e.getKeyCode() == KeyEvent.VK_ESCAPE) btCancelar.doClick();
					else if (e.getKeyCode() == KeyEvent.VK_ENTER) bAdicionar.doClick();
					else super.keyPressed(e);
				}
			});
		}
	}

	private Component getPainelPrincipal(){
		Component c = getParent();
		while (c != null){
			if (c.getClass() == VendaMainPanel.class)  return c;
			c = c.getParent();
		}
		return c;
	}
	
	private void calcularTotal()
	{
		try{
			txtValorProdutoTotal.setText(""+ (txtValorProdutoUnitario.getValor() * ((Integer) spinnerQuantidade.getValue())));
		}catch(NumberFormatException e){
			
			e.printStackTrace();
		}
	}
	private class EventoBotaoControle implements ActionListener, AncestorListener {
		
		public void actionPerformed(ActionEvent e) {
			if (e.getSource() == btCancelar) {
				Component c = getPainelPrincipal();
				try {
					if (c.getClass() == VendaMainPanel.class)
						((VendaMainPanel) c).getIFrameVendaProduto().setVisible(false);
				} catch (Exception ex) {
					ex.printStackTrace();
				}
			}

			if (e.getSource() == bAdicionar) {
				Component c = getPainelPrincipal();
				ProdutoVO produtoSelecionado = (ProdutoVO) cbProdutos.getSelectedItem();

				ProdutoVendaVO produtoAdicionar = new ProdutoVendaVO();
				produtoAdicionar.setId(produtoVenda != null ? produtoVenda.getId() : null);
				produtoAdicionar.setProduto(produtoSelecionado);
				produtoAdicionar.setQuantidade((Integer) spinnerQuantidade.getValue());
				produtoAdicionar.setValor(txtValorProdutoUnitario.getValor());
				produtoAdicionar.setTotal(txtValorProdutoTotal.getValor());

				try {
					if (c.getClass() == VendaMainPanel.class) {
						((VendaMainPanel) c).getIFrameVenda().adicionarProduto(produtoAdicionar);
						((VendaMainPanel) c).getIFrameVendaProduto().setVisible(false);
					}
				} catch (Exception ex) {
					ex.printStackTrace();
				}

			}
			
			
		}

		@Override
		public void ancestorAdded(AncestorEvent arg0) {
			// TODO Auto-generated method stub
			calcularTotal();
			
		}

		@Override
		public void ancestorMoved(AncestorEvent arg0) {
			calcularTotal();
			
		}

		@Override
		public void ancestorRemoved(AncestorEvent arg0) {
			// TODO Auto-generated method stub
			calcularTotal();
			
		}
	}
	
	private class AlteracaoProdutoListner implements ItemListener {

		@Override
		public void itemStateChanged(ItemEvent e) {
			if (e.getSource() == cbProdutos){
				if(cbProdutos.getSelectedItem()!= null)
				txtValorProdutoUnitario.setText(formatter.format(+((ProdutoVO)cbProdutos.getSelectedItem()).getValor()));
				calcularTotal();
			}
		
			
		}
	}
}	