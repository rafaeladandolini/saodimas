package br.com.saodimas.view.components.panel.cliente;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JRadioButton;
import javax.swing.JTextArea;
import javax.swing.JTextField;

import br.com.saodimas.controller.Controller;
import br.com.saodimas.model.beans.ClienteVO;
import br.com.saodimas.model.beans.ColaboradorVO;
import br.com.saodimas.model.exception.MensagemSaoDimasException;
import br.com.saodimas.view.components.document.CustomDocument;
import br.com.saodimas.view.components.panel.BarraNotificacao;
import br.com.saodimas.view.components.text.CEPTextField;
import br.com.saodimas.view.components.text.FoneTextField;
import br.com.saodimas.view.components.text.LoginTextField;
import br.com.saodimas.view.util.ExpReg;
import br.com.saodimas.view.util.ListasComuns;

@SuppressWarnings("serial")
public class ClientePanel extends JPanel {
	private static final String MENSAGEM_PADRAO = "   (*) Preenchimento obrigatório";

	private ClienteVO cliente;
	private BarraNotificacao barNotificacao;
		
	private JTextField txtNome;
	private JTextField txtEndereco;
	private JTextField txtBairro;
	private CEPTextField txtCEP;
	private FoneTextField txtContato;
  	private FoneTextField txtContato2;
	private JComboBox cbCidades;
	private JComboBox cbStatus;
	private JTextArea txtaObs;
	private JTextField txtApolice;
	private JTextField txtTitularApolice;
	
	private JButton btCarregarApolice;
	private JButton btCancelar;
	private JButton btSalvar;
	
	private JLabel lbNome;
	private JLabel lbEndereco;
	private JLabel lbBairro;
	private JLabel lbCEP;
	private JLabel lbContato;
	private JLabel lbContato2;
	private JLabel lbCidade;
	private JLabel lbStatus;
	private JLabel lbObservacao;
	private JLabel lbNumApolice;
	private JLabel lbTitularApolice;
	
	
	private static final Dimension DLABEL = new Dimension(120,22);
	private static final Dimension DFIELDM = new Dimension(115,22);
	
	public ClientePanel() {
		initialize();
		configure();
	}

	public ClienteVO getClienteVO() {
		return cliente;
	}

	public void setCliente(ClienteVO cliente) {
		this.cliente = cliente;
		if(cliente != null){
		
		}
		else{limparCampos();}
	}

	public void limparCampos() {
	
	}
	
	public void focoPadrao(){
		txtNome.requestFocus();
	}
	
	private JLabel lbNome;
	private JLabel lbEndereco;
	private JLabel lbBairro;
	private JLabel lbCEP;
	private JLabel lbContato;
	private JLabel lbContato2;
	private JLabel lbCidade;
	private JLabel lbStatus;
	private JLabel lbObservacao;
	private JLabel lbNumApolice;
	private JLabel lbTitularApolice;

	private void initialize() {
		barNotificacao = new BarraNotificacao(MENSAGEM_PADRAO);
		
		lbNome = new JLabel("Nome: ", JLabel.RIGHT);
		lbNome.setPreferredSize(DLABEL);
		lbNome.setMinimumSize(DLABEL);
		
		CustomDocument nomeDoc = new CustomDocument(150);
		txtNome = new JTextField();
		txtNome.setDocument(nomeDoc);
		txtNome.setPreferredSize(DFIELDM);
		
		lbEndereco = new JLabel("Endereço: ", JLabel.RIGHT);
		lbEndereco.setPreferredSize(DLABEL);
		lbEndereco.setMinimumSize(DLABEL);
		
		txtEndereco = new JTextField();
		txtEndereco.setDocument(nomeDoc);
		txtEndereco.setPreferredSize(DFIELDM);
				
		lbBairro = new JLabel("Bairro: ", JLabel.RIGHT);
		lbBairro.setPreferredSize(DLABEL);
		lbBairro.setMinimumSize(DLABEL);
		
		CustomDocument bairroDoc = new CustomDocument(150);
		txtBairro = new JTextField();
		txtBairro.setDocument(bairroDoc);
		txtBairro.setPreferredSize(DFIELDM);
			
		lbCEP = new JLabel("CEP: ", JLabel.RIGHT);
		lbCEP.setPreferredSize(DLABEL);
		lbCEP.setMinimumSize(DLABEL);
		
		txtCEP = new CEPTextField();
		txtCEP.setPreferredSize(DFIELDM);
		
		lbContato = new JLabel("Telefone: ", JLabel.RIGHT);
		lbContato.setPreferredSize(DLABEL);
		lbContato.setMinimumSize(DLABEL);

		txtContato = new FoneTextField();
		txtContato.setPreferredSize(DFIELDM);
		txtContato.setMinimumSize(DFIELDM);

		lbContato2 = new JLabel("Celular:  ", JLabel.RIGHT);
		lbContato2.setPreferredSize(DLABEL);
		lbContato2.setMinimumSize(DLABEL);

		txtContato2 = new FoneTextField();
		txtContato2.setPreferredSize(DFIELDM);
		txtContato2.setMinimumSize(DFIELDM);
		
		lbStatus = new JLabel("Status:  ", JLabel.RIGHT);
		lbStatus.setPreferredSize(DLABEL);
		lbStatus.setMinimumSize(DLABEL);

		cbStatus = new JComboBox(ListasComuns.STATUS_CLIENTE);
		cbStatus.setPreferredSize(DFIELDM);
		cbStatus.setMinimumSize(DFIELDM);
		
		txtaObs = new JTextArea();
		txtaObs.setBorder(BorderFactory.createLineBorder(Color.GRAY));
		txtaObs.setDocument(new CustomDocument(255));
		
		lbNumApolice = new JLabel("Núm. Apolice  ", JLabel.RIGHT);
		lbNumApolice.setPreferredSize(DLABEL);
		lbNumApolice.setMinimumSize(DLABEL);

		txtApolice = new JTextField();
		txtApolice.setPreferredSize(DFIELDM);
		txtApolice.setMinimumSize(DFIELDM);
		txtApolice.setEditable(true);
		
		lbTitularApolice = new JLabel("Titular: *", JLabel.RIGHT);
		lbTitularApolice.setPreferredSize(DLABEL);
		lbTitularApolice.setMinimumSize(DLABEL);

		txtTitularApolice = new JTextField();
		txtTitularApolice.setPreferredSize(DFIELDM);
		txtTitularApolice.setEditable(false);
		
		btCarregarApolice = new JButton("Carregar", new ImageIcon("imagens/search.gif"));
		btCarregarApolice.addActionListener(new EventoBotaoControle());
		btCarregarApolice.setHorizontalAlignment(JButton.LEFT);
		
		btCancelar = new JButton("Cancelar", new ImageIcon("imagens/cancel.gif"));
		btCancelar.addActionListener(new EventoBotaoControle());
		btCancelar.setHorizontalAlignment(JButton.LEFT);
		
		btSalvar = new JButton("Salvar", new ImageIcon("imagens/save.gif"));
		btSalvar.addActionListener(new EventoBotaoControle());
		btSalvar.setHorizontalAlignment(JButton.LEFT);
	}
	
	private void configure() {
		GridBagConstraints c = new GridBagConstraints();
		JPanel infUser = new JPanel(new GridBagLayout());

		c.anchor = GridBagConstraints.FIRST_LINE_END;
		c.fill = GridBagConstraints.HORIZONTAL;
		c.insets = new Insets(1, 1, 2, 1);
		c.weightx = 0;

		c.gridy = 0; infUser.add(lbTipo, c);
		c.gridy = 1; infUser.add(lbSituacao, c);
		c.gridy = 2; infUser.add(lbDataCadastro, c);
		c.gridy = 3; infUser.add(lbNome, c);
		c.gridy = 4; infUser.add(lbLogin, c);
		c.gridy = 5; infUser.add(lbMatricula, c);
		c.gridy = 6; infUser.add(lbSenha, c);
		c.gridy = 7; infUser.add(lbConfSenha, c);		
		
		JPanel panelTipo = new JPanel(new FlowLayout(FlowLayout.LEADING));
		panelTipo.add(rdFunc);
		panelTipo.add(rdAdmin);
		panelTipo.setMinimumSize(new Dimension(200, 22));
		
		c.anchor = GridBagConstraints.FIRST_LINE_START;
		c.fill = GridBagConstraints.HORIZONTAL;
		c.weightx = 1;
		c.weighty = 0;
		c.gridx = 1;
		c.gridy = 0; infUser.add(panelTipo, c);
		c.fill = GridBagConstraints.NONE;
		c.gridy = 1; infUser.add(cbSituacao, c);
		c.gridy = 2; infUser.add(txtDataCadastro, c);
		c.fill = GridBagConstraints.HORIZONTAL;
		c.gridy = 3; infUser.add(txtNome, c);
		c.fill = GridBagConstraints.NONE;
		c.gridy = 4; infUser.add(txtLogin, c);
		c.gridy = 5; infUser.add(txtMatricula, c);
		c.gridy = 6; infUser.add(pwdSenha, c);
		c.weighty = 1;
		c.gridy = 7; infUser.add(pwdConfSenha, c);
		
		infUser.setBorder(BorderFactory.createTitledBorder("Identificação"));
		adicionarAtalhosComandos(infUser);
		
		JPanel controle = new JPanel(new FlowLayout(FlowLayout.RIGHT));
		controle.add(btSalvar);
		controle.add(btCancelar);
		controle.setMinimumSize(new Dimension(200, 22));
		adicionarAtalhosComandos(controle);
		
		JPanel panelColaborador = new JPanel(new BorderLayout());
		panelColaborador.add(barNotificacao, BorderLayout.NORTH);
		panelColaborador.add(infUser, BorderLayout.CENTER);
		panelColaborador.add(controle, BorderLayout.SOUTH);
		adicionarAtalhosComandos(panelColaborador);
		
		JPanel formPrincipal = new JPanel(new FlowLayout(FlowLayout.LEADING));
		formPrincipal.add(panelColaborador);
		adicionarAtalhosComandos(formPrincipal);
		
		setLayout(new BorderLayout());
		add(formPrincipal, BorderLayout.CENTER);
		adicionarAtalhosComandos(this);
	}
	
	private void adicionarAtalhosComandos(JPanel panel){
		for (Component c : panel.getComponents()) {
			c.addKeyListener(new KeyAdapter(){
				@Override
				public void keyPressed(KeyEvent e) {
					if (e.getKeyCode() == KeyEvent.VK_ESCAPE) btCancelar.doClick();
					else if (e.getKeyCode() == KeyEvent.VK_ENTER) btSalvar.doClick();
					else super.keyPressed(e);
				}
			});
		}
	}
	
	private Component getPainelPrincipal(){
		Component c = getParent();
		while (c != null){
			if (c instanceof ClienteMainPanel) return c;
			c = c.getParent();
		}
		return c;
	}	
	

	
	private class EventoRadioTipo implements ActionListener{
		public void actionPerformed(ActionEvent ev) {
			boolean isFuncionario = (ev.getSource() == rdFunc);
			
			lbMatricula.setVisible(isFuncionario);
			txtMatricula.setVisible(isFuncionario);
		}
	}
	
	
	/*private boolean validaCampos()
	{
		String erros = "";
		erros += ValidaApolice.validarPlano((PlanoVO)cbPlano.getSelectedItem());
		if (erros.length() != 0)
			btErroPlano.setMensagem(ValidaApolice.validarPlano((PlanoVO)cbPlano.getSelectedItem()));
		else {
			isPJ = ((PlanoVO)cbPlano.getSelectedItem()).isEmpresarial();
			if (isPJ){
				erros += ValidaApolice.validaRazaoSocial(txtRazaoSocial.getText());
				btErroRazaoSocial.setMensagem(ValidaApolice.validaRazaoSocial(txtRazaoSocial.getText()));

				erros += ValidaApolice.validaCNPJ(txtCNPJ.getText());
				btErroCNPJ.setMensagem(ValidaApolice.validaCNPJ(txtCNPJ.getText()));
			}
			else{
				btErroRazaoSocial.setMensagem(null);
				btErroCNPJ.setMensagem(null);
			}
			if (erros.length() > 0) barNotificacao.mostrarMensagem("Erro ao submeter os dados! A causa será exibida clicando no botão ao lado de cada campo!", BarraNotificacao.AVISO);
			else{
				btErroPlano.setMensagem(null);a
				btErroRazaoSocial.setMensagem(null);
				btErroCNPJ.setMensagem(null);
		return false;
	}*/
	
	private class EventoBotaoControle implements ActionListener{
		@SuppressWarnings("static-access")
		public void actionPerformed(ActionEvent e) {
			
			Component c = getPainelPrincipal();
			if (e.getSource() == btCancelar){
				try{
					((ClienteMainPanel)c).getIframeCliente().setVisible(false);
				}
				catch(ClassCastException cex){
					cex.printStackTrace();
				}
			}else
			if (e.getSource() == btSalvar)
			{
				ColaboradorVO novocolaborador = new ColaboradorVO();
				novocolaborador.setDataCadastro(new Date());
				novocolaborador.setLogin(txtLogin.getText());
				novocolaborador.setMatricula(txtMatricula.getText());
				novocolaborador.setNome(txtNome.getText());
				novocolaborador.setSenha(new String(pwdSenha.getPassword()));
				novocolaborador.setStatus(cbSituacao.getSelectedItem().toString());
				novocolaborador.setTipoColaborador(rdAdmin.isSelected()? rdAdmin.getText() : rdFunc.getText());
				
				try {
					if(cliente != null){
						novocolaborador.setId(cliente.getId());
						
							Controller.getInstance().updateColaborador(novocolaborador);
						
						((ClienteMainPanel)c).mostrarMensagem("Alterações efetuadas com sucesso.",	barNotificacao.INFO);
					}else
					{
						Controller.getInstance().insertColaborador(novocolaborador);
						((ClienteMainPanel)c).mostrarMensagem("Cadastro efetuado com sucesso.",	barNotificacao.INFO);
					}				
					((ClienteMainPanel)c).carregarClientesTable();
					((ClienteMainPanel)c).getIframeCliente().setVisible(false);
				} catch (MensagemSaoDimasException e1) {
					((ClienteMainPanel)c).mostrarMensagem(e1.getMessage(),	barNotificacao.INFO);
					e1.printStackTrace();
				}
				
			}

		}
	}
}	